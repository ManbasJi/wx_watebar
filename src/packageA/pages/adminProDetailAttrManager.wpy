<template>
	<view class="top_container">
	</view>
	<view class="content_container">
		<repeat for="{{attrList}}" key="index" index="index" item="item">
		<view class="attr_box">
			<form bindsubmit="formSubmitOne">
			<view class="attr_top">
				<text>{{item.typeName}}
				</text>
				<view class="type_name" data-index="{{index}}">{{item.fTypeName}}</view>
				<!-- <input bindinput="inputFinish" type="text" name="attr_type1" data-index="{{index}}" value="{{index==1?typeName1:typeName2}}"/> -->
				<button class="btn_update" data-index="{{index}}" wx:if="{{item.fTypeName!=''&&item.fTypeName!=undefined}}" @tap.stop="onUpdateType" data-index="{{index}}">修改</button>
				<button class="btn_update" data-index="{{index}}" wx:if="{{item.fTypeName==''||item.fTypeName==undefined}}" @tap.stop="onAddType" data-index="{{index}}">添加</button>
			</view>
			<view class="attr_content">
				<text>{{item.attrName}}
				</text>
				<input type="digit" name="attr_name1" />
				<text>{{item.attrPrice}}
				</text>
				<input type="text" name="attr_price1" />
				<button class="btn_submit" formType="submit" data-index="{{index}}">添加</button>
			</view>
			<view class="attr_footer">
				<repeat for="{{item.attrNameList}}" key="cindex" index="cindex" item="items">
					<view class="attrname" data-index="{{index}}" data-cindex="{{cindex}}" @tap="onUpdateAttrItem"><text>{{items.fName}}</text><i class="iconfont icon-remove" @tap.stop="onRemoveAttrItem" data-index="{{index}}" data-cindex="{{cindex}}" data-item="{{item}}"></i></view>
				</repeat>
			</view>
			</form>
		</view>
		</repeat>
	</view>
	<view class="footer_container">
	</view>

<!-- 弹出框 -->
	<view class="modal-mask" catchtouchmove="preventTouchMove" wx:if="{{isTypeModal}}"></view>
		<view class="modal-dialog" wx:if="{{isTypeModal}}">
			<view class="title">规格类型</view>
			<view class="content">
				<view class="input_num">
					<input bindinput="onTypeInputFinish" placeholder="请输入规格类型名称" type="text" value="{{typeNameModal}}"/>
				</view>
			</view>
			<view class="footer">
				<view class="btn_cancel" @tap="onModalOption" data-status="cancel">取消</view>
				<view class="btn_confirm" @tap="onModalOption" data-status="confirm">确定</view>
			</view>
		</view>


	<view class="modal-mask" catchtouchmove="preventTouchMove" wx:if="{{isAttrModal}}"></view>
		<view class="modal-dialog" wx:if="{{isAttrModal}}">
			<view class="content">
				<view class="input_attr">
					<input bindinput="onNameInputFinish" placeholder="请输入规格名称" type="text" value="{{attrNameModal}}"/>
				</view>
			</view>
			<view class="content">
				<view class="input_attr">
					<input bindinput="onPriceInputFinish" placeholder="请输入规格价格" type="text" value="{{attrPriceModal}}"/>
				</view>
			</view>
			<view class="footer">
				<view class="btn_cancel" @tap="onAttrModalOption" data-status="cancel">取消</view>
				<view class="btn_confirm" @tap="onAttrModalOption" data-status="confirm">确定</view>
			</view>
		</view>
</template>

<style lang="less">
.modal-mask {
  width: 100%;
  height: 100%;
  position: fixed;
  top: 0;
  left: 0;
  background: #000;
  opacity: 0.5;
  overflow: hidden;
  z-index: 9000;
  color: #fff;
}

.modal-dialog {
  width: 540rpx;
  overflow: hidden;
  position: fixed;
  top: 40%;
  left: 0;
  z-index: 9999;
  background: #f9f9f9;
  margin: -180rpx 105rpx;
  border-radius: 36rpx;
  .title{
  	padding-top:50rpx;
  	font-size:36rpx;
  	color:#333;
  	text-align:center;
  }
  .content{
  	padding: 50rpx 32rpx;
  	.input_num{
  		display: flex;
  		background:#fff;
  		border:2rpx solid #ddd;
  		border-radius:4rpx;
  		font-size:28rpx;
  		input{
  			width:100%;
  			height:82rpx;
  			font-size:28rpx;
  			line-height:28rpx;
  			padding: 0 20rpx;
  			box-sizing:border-box;
  			color:#333;
  		}
  	}
  	.input_attr{
  		display: flex;
  		background:#fff;
  		border:2rpx solid #ddd;
  		border-radius:4rpx;
  		font-size:28rpx;
  		input{
  			width:100%;
  			height:62rpx;
  			font-size:28rpx;
  			line-height:28rpx;
  			padding: 0 20rpx;
  			box-sizing:border-box;
  			color:#333;
  		}
  	}
  }

  .footer{
  	height:86rpx;
  	line-height:86rpx;
  	border-top:1rpx solid #dedede;
  	font-size:34rpx;
  	.btn_cancel{
  		float:left;
  		width:50%;
  		color:#333;
  		text-align:center;
  		margin-top:0.5rpx;
  	}
  	.btn_confirm{
  		float:left;
  		width:50%;
  		color:#333;
  		margin-top:1rpx;
  		text-align:center;
  	}
  }

}

	.top_container{
		background:#fff;
		height:70rpx;
		width:100%;
		line-height:70rpx;
		border-top:1rpx solid #f2f2f2;
		position:fixed;
		z-index:9999;
		top:0rpx;
		.btn_save{
			float:right;
			background:#ffc400;
			width:100rpx;
			height:60rpx;
			line-height:60rpx;
			margin-top:5rpx;
			font-szie:28rpx;
			color:#fff;
			text-align:center;
			border-radius:10rpx;
			margin-right:10rpx;

		}
	}
	.attr_box{
		padding:15rpx 20rpx;
		background:#fff;
		margin-top:90rpx;
		.attr_top{
			height:80rpx;
			line-height:80rpx;
			border-bottom:1rpx solid #cdcdcd;
			text{
				font-szie:28rpx;
				color:#666;
				float:left;
				margin-right:20rpx;
			}
			input{
				float:left;
				width:50%;
				height:50rpx;
				margin-top:15rpx;
			}
			.type_name{
				float:left;
				width:50%;
				height:50rpx;
				margin-top:15rpx;	
			}
		}
		.attr_content{
			height:130rpx;
			border-bottom:1rpx solid #cdcdcd;
			text{
				color:#666;
				float:left;
				margin-top:10rpx;
				margin-right:20rpx;
			}
			input{
				float:left;
				width:50%;
				margin-top:10rpx;
				height:50rpx;
			}
			button{
				font-size:24rpx;
				background:#fff;
				border:1rpx solid #fff;
				width:120rpx;
				height:60rpx;
				float:right;
				margin-top:-20rpx;
			}

		}
		.attr_footer{
			padding-bottom:10rpx;
			padding-left:20rpx;
			height:140rpx;
			.attrname{
				padding-left:8rpx;
				border-radius:10rpx;
				border:1rpx solid #999;
				height:70rpx;
				line-height:70rpx;
				float:left;
				margin-right:20rpx;
				margin-top:20rpx;
				text-align:center;
				text{
					font-size:26rpx;
				}
				.icon-remove{
					font-size:40rpx;
					height:30rpx;
					width:30rpx;
					color:#cdcdcd;
				}				
			}

		}
			i{
				float:right;
				width:80rpx;
				height:80rpx;				
				z-index:9999;
				margin-top:-20rpx;
			}
	}
	.btn_update{
		font-size:24rpx;
		background:#cdcdcd;
		border:1rpx solid #fff;
		width:120rpx;
		height:60rpx;
		float:right;
	}
	.markNum{
		color:#03a9f4;
		font-size:30rpx;
		margin:20rpx;
	}

</style>

<script>
import wepy from 'wepy'
import api from '@/api/api'
import tip from '@/utils/tip'
import {
	TOKEN,
	SHOPID
} from '@/utils/constant'
export default class AdminProDetailAttrManager extends wepy.page{
	config = {
		navigationBarTitleText:'商品规格'
	}

	data = {
		postData:[],
		attrNameList:[],
		attrNameList2:[],
		attrNameList3:[],
		attrNameList4:[],
		attrList:[],
		attrListIndex:'',
		goodsId:'',
		shopId:'',
		token:'',
		type:0,//1:编辑、2：添加
		isModal:false,
		isTypeModal:false,
		isAttrModal:false,
		attrType:[],

		optionType:'',
		typeNameModal:'',
		attrNameModal:'',
		attrPriceModal:'',
		attrItemId:'',//当前修改的规格id
		typeIndex:'',//规格类型下标，点击修改或添加时改变值
		attrIndex:'',//所要修改的规格下标
	}

	onLoad(opts){
			this.goodsId = opts.goodsId;
			console.log("goodsId===",this.goodsId);
			this.shopId = wepy.getStorageSync(SHOPID)||{};
			this.token = wepy.getStorageSync(TOKEN)||{};

			let attrMsgList = {};
			attrMsgList.typeName="一级规格类型：";
			attrMsgList.attrName="一级规格名称：";
			attrMsgList.attrPrice="一级规格价格：";
			attrMsgList.attrNameList=[];
			this.attrList.push(attrMsgList);
			attrMsgList={};
			attrMsgList.typeName="二级规格类型：";
			attrMsgList.attrName="二级规格名称：";
			attrMsgList.attrPrice="二级规格价格：";
			attrMsgList.attrNameList=[];
			this.attrList.push(attrMsgList);
			attrMsgList={};
			attrMsgList.typeName="三级规格类型：";
			attrMsgList.attrName="三级规格名称：";
			attrMsgList.attrPrice="三级规格价格：";
			attrMsgList.attrNameList=[];
			this.attrList.push(attrMsgList);
			attrMsgList={};
			attrMsgList.typeName="四级规格类型：";
			attrMsgList.attrName="四级规格名称：";
			attrMsgList.attrPrice="四级规格价格：";
			attrMsgList.attrNameList=[];
			this.attrList.push(attrMsgList);
			console.log(this.attrList);
			this.getAttrMsgList();

	}

	formSubmitOne(e){
		let that=this;
		let index=e.detail.target.dataset.index;
		// let attrType = e.detail.value.attr_type1;
		let attrName = e.detail.value.attr_name1;
		let attrPrice = e.detail.value.attr_price1;
		let typeId = index;
		let typeNum = index;
		let itemNum = 0;

		if(this.attrList[index].fTypeName==''||this.attrList[index].fTypeName==undefined){
			tip.toast("请先保存规格类型！");
			return;			
		}
		if(attrName==''||attrName==undefined){
			tip.toast("规格名称不能为空");
			return;
		}
		if(attrPrice==''||attrPrice==undefined){
			tip.toast("规格价格不能为空");
			return;
		}

		let cindex = that.attrList[index].attrNameList.length;
		let attr = {};

		attr.fShopId = this.shopId;
		attr.fGoodsId = this.goodsId;
		attr.fTypeId = index;
		attr.fTypeName = this.attrList[index].fTypeName;
		attr.fTypeNum = index;
		attr.fName = attrName;
		attr.fAddPrice = attrPrice;
		attr.fItemNum = cindex;
		attr.fStatus = 1;

		// that.attrList[index].fTypeName = attrType;
		that.attrList[index].attrNameList.push(attr);
		that.attrListIndex = index;
		//调用添加属性接口
		let data=[];
		data.push(attr);
		this.onAddAttrItem(data);
	}

	onTypeInputFinish(e){
		this.typeNameModal = e.detail.value;
	}

	onNameInputFinish(e){
		this.attrNameModal = e.detail.value;
	}

	onPriceInputFinish(e){
		this.attrPriceModal = e.detail.value;
	}


	inputFinish(e){
		let type = e.detail.value;
		let index = e.currentTarget.dataset.index;
		this.attrType[index]=type;
		this.attrList[index].attrType = type;
		console.log("inputFinish===",type);
	}

	async getAttrMsgList(e){
		let attr=[];
		let that = this;
		const json = await api.getAttrMsgList({
			query:{
				fGoodsId:this.goodsId
			}
		})
		console.log("getAttrMsgList===",json);
		if(json.data.code==0){
			attr = json.data.data;
			if(attr.length==0||attr.length==undefined){
				return;
			}
			for(let i = 0 ;i<attr.length;i++){
				that.attrList[i].attrNameList=attr[i].fUnionName;
				that.attrList[i].fTypeName = attr[i].fTypeName;
				that.attrType[i] = attr[i].fTypeName;
			}
			}
			console.log("attrList===",that.attrList);
			this.$apply();
		}

		async onUpdateAttr(data){
			console.log("updateData===",data);
			const json = await api.updateGoodsAttribute({
				query:{
					token:this.token,
					data:data
				},
				method:'POST'
			})
			console.log("onUpdateAttr===",json);
			if(json.data.code==0){
				this.getAttrMsgList();
				this.isTypeModal = false;
			}
		}

		async onAddAttrItem(data){

			const json = await api.addGoodsAttribute({
				query:{
					token:this.token,
					data:data
				},
				method:'POST'
			})
			console.log("onAddAttrItem===",json);
			if(json.data.code==0){
				this.$apply()
			}else{
				tip.toast("网络连接失败!")
				this.getAttrMsgList();//添加失败重新调用接口获取信息，这样可以清空掉缓存
			}
			
		}

		async onDelAttrItem(data,index,cindex){
			const json = await api.delGoodsAttribute({
				query:{
					token:this.token,
					data:data
				},
				method:'POST'
			});
			console.log("onDelAttrItem===",json);
			if(json.data.code==0){
				this.attrList[index].attrNameList.splice(cindex,1);
				this.$apply();
			}else{
				tip.toast("网络连接失败!")
			}
		}

	methods = {				
		saveAttr(e){
			console.log("this.attrList",this.attrList);
			let data = [];
			for(let i = 0;i<this.attrList.length;i++){
				if(this.attrList[0].attrNameList.length==0||this.attrList[0].attrNameList.length==undefined){
					tip.toast("请填写要保存的商品规格!");
					return;
				}

			}

			console.log("data===",data);
		},
		onUpdateAttrItem(e){
			this.isAttrModal = true;
			let index = e.currentTarget.dataset.index;
			let cindex = e.currentTarget.dataset.cindex;
			this.typeIndex = index;
			this.attrIndex = cindex;
			//初始化名称和价格
			this.attrNameModal = this.attrList[index].attrNameList[this.attrIndex].fName;
			this.attrPriceModal = this.attrList[index].attrNameList[this.attrIndex].fAddPrice;
			this.attrItemId = this.attrList[index].attrNameList[this.attrIndex].fItemId;
		},
		onAddType(e){
			this.optionType = 'add';
			this.isTypeModal = true;
			let index=e.currentTarget.dataset.index;
			this.typeIndex = index;
			this.typeNameModal==''
		},
		onUpdateType(e){
			this.optionType = 'update';
			this.isTypeModal = true;
			let index = e.currentTarget.dataset.index;
			this.typeIndex = index;
			this.typeNameModal = this.attrList[index].fTypeName;
		},
		onModalOption(e){
			console.log("typeIndex===",this.typeIndex);
			let status = e.currentTarget.dataset.status;
			let that = this;
			if(status=='confirm'){
				if(this.typeNameModal==''){
					tip.toast("请输入规格类型名称!");
					return;
				}
				if(that.optionType=='update'){
					//显示提示弹窗
					wx.showModal({
						title:'提示',
						content:'该规格类型下面的所有属性将全部更新！',
						success:function(res){
							if(res.confirm){
								that.attrList[that.typeIndex].fTypeName = that.typeNameModal;
								that.isTypeModal = false;
								let data = [];
								let item={};
								item.fGoodsId = that.goodsId;
								item.fTypeId = that.typeIndex;
								item.fTypeName = that.attrList[that.typeIndex].fTypeName;
								item.fAttrUpdate = [];
								data.push(item);
								that.onUpdateAttr(data);
							}else if(res.cancel){
							}
						}
					})
				}else if(that.optionType=='add'){
					that.attrList[that.typeIndex].fTypeName = that.typeNameModal;
					that.isTypeModal = false;
				}
				
			}else if(status=='cancel'){
				this.isTypeModal = false;
			}
		},
		onAttrModalOption(e){
			let status = e.currentTarget.dataset.status;
			let that = this;
			if(status=='confirm'){
				if(this.attrNameModal==''||this.attrPriceModal==''){
					tip.toast("请输入完整信息!");
					return;
				}
				let data=[];
				let item = {};

				item.fGoodsId = that.goodsId;
				item.fTypeId = that.typeIndex;
				item.fTypeName = that.attrList[that.typeIndex].fTypeName;
				item.fAttrUpdate = [];
				let attrItem = {};
				attrItem.fItemId = that.attrItemId;
				attrItem.fName = that.attrNameModal;
				attrItem.fAddPrice = that.attrPriceModal;
				item.fAttrUpdate.push(attrItem);

				data.push(item);
				that.onUpdateAttr(data);
			}
			that.isAttrModal = false						
		},
		onRemoveAttrItem(e){
			let index= e.currentTarget.dataset.index;
			let cindex= e.currentTarget.dataset.cindex;
			console.log("onRemoveAttrItem====",e.currentTarget.dataset.index);
			console.log("onRemoveAttrItem====",e.currentTarget.dataset.cindex);
			console.log("item====",this.attrList[index].attrNameList);
			let data = [];
			let item = {};
			item.fShopId = this.shopId;
			item.fItemId = this.attrList[index].attrNameList[cindex].fItemId;
			item.fGoodsId = this.goodsId;
			data.push(item);
			this.onDelAttrItem(data,index,cindex);
		},

	}
}
</script>