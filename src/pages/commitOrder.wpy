<style lang="less">
	page{
		background:#f2f2f2;
	}
	.empty_address{
		background:#fff;
		width:94%;
		height:90rpx;
		line-height:90rpx;
		.title{
			font-size:28rpx;
			color:#999;
			float:left;
			margin-left:20rpx;
		}
		.icon_arrow_right{
			float:right;
			width:45rpx;
			height:45rpx;
			margin-top:23rpx;
			margin-right:20rpx;
		}
	}

	.address{
		background:#fff;
		width:94%;
		height:145rpx;
		margin-top:30rpx;
		.icon_address{
			width:40rpx;
			height:40rpx;
			margin-left:30rpx;
			margin-top:50rpx;
			float:left;
		}
		.address_detail{
			width:80%;
			font-size:28rpx;
			color:#333;
			position:relative;
			top:30rpx;
			left:20rpx;
			white-space:nowrap;
			overflow:hidden;
			text-overflow:ellipsis;
		}
		.user_msg{
			position:relative;
			font-size:26rpx;
			top:40rpx;
			left:20rpx;
		}
		.icon_arrow_right{
			float:right;
			width:45rpx;
			height:45rpx;
			margin-right:20rpx;
			margin-top:-20rpx;
		}
	}
	.pro_list{
		background:#fff;
		margin-top:20rpx;
		width:94%;
		.pro_list_top{
			margin-left:20rpx;
			font-size:28rpx;
			color:#333;	
			height:60rpx;
			line-height:60rpx;
		}
		.pro_list_content{

		}
		.pro_list_item{
			background:#f2f3f2;
			padding:20rpx;
			margin-top:5rpx;
			height:120rpx;
			box-shadow:1px 0px 0px 0px #f2f3f2;
			.image{
				float:left;
				width:120rpx;
				height:120rpx;
			}
			.name{
				float:left;
				font-size:28rpx;
				color:#333;
				margin-left:15rpx;
			}
			.price{
				display:block;
				text-align:right;
				font-size:28rpx;
				color:#333;
				width:100%;
			}
			.originPrice{
				display:block;
				text-align:right;
				width:100%;
				font-size:28rpx;
				color:#999;
				margin-top:8rpx;
				text-decoration:line-through;
			}
			.attr{
				float:left;
				font-size:24rpx;
				color:#999;
				margin-left:15rpx;
				margin-top:8rpx;
			}
			.num{
				margin-left:15rpx;
				font-size:28rpx;
				color:#999;
			}
		}
	}
	.coupons_price{
		width:94%;
		height:60rpx;
		background:#fff;
		padding-top:20rpx;
		border-top-left-radius:20rpx;
		border-top-right-radius:20rpx;
		border-top:1rpx dashed #ccc;
		.coupon_text{
			float:left;
			font-size:28rpx;
			color:#333;
			margin-left:20rpx;
		}
		.coupon_price{
			float:right;
			font-size:28rpx;
		}
		i{
			float:right;
			color:#999;
			font-size:28rpx;
			margin-right:20rpx;
			margin-top:5rpx;
		}
	}
	.discount_price{
		width:94%;
		height:60rpx;
		background:#fff;
		padding-top:20rpx;
		border-top-left-radius:20rpx;
		border-top-right-radius:20rpx;
		border-top:1rpx dashed #ccc;
		.discount_text{
			float:left;
			font-size:28rpx;
			color:#333;
			margin-left:20rpx;
		}
		.discount{
			float:right;
			font-size:28rpx;
			margin-right:20rpx;
		}
	}
	.order_price{
		width:94%;
		height:120rpx;
		background:#fff;
		padding-top:20rpx;
		border-bottom-left-radius:20rpx;
		border-bottom-right-radius:20rpx;
		.package_text{
			float:left;
			font-size:28rpx;
			color:#333;
			margin-left:20rpx;
		}
		.package_price{
			display:block;
			width:100%;
			text-align:right;
			position:relative;
			right:20rpx;
			font-size:28rpx;
		}
		.distribution_text{
			float:left;
			margin-top:20rpx;
			font-size:28rpx;
			color:#333;
			margin-left:20rpx;
		}
		.distribution_price{
			display:block;
			width:100%;
			text-align:right;
			margin-top:20rpx;
			position:relative;
			right:20rpx;
			font-size:28rpx;
		}
	}
	.all_price{
		background:#fff;
		border-top:1rpx dashed #ccc;
		height:70rpx;
		width:94%;
		line-height:70rpx;
		text-align:right;
		.all_price_text{
			font-size:30rpx;
			color:red;
			margin-right:20rpx;
		}
	}
	.order_content{
		width:94%;
		background:#fff;
		margin-top:20rpx;
		height:80rpx;
		line-height:80rpx;
		margin-bottom:45rpx;
		.remark_text{
			width:10%;
			font-size:28rpx;
			color:#333;
			float:left;
			margin-left:20rpx;
		}
		.remark_input{
			float:left;
			width:80%;
			height:40rpx;
			margin-top:15rpx;
			margin-left:15rpx;
			border-bottom:1rpx solid #f2f2f2;
		}
	}

	.btn_pay{
		position:fixed;
		bottom:0rpx;
		width:100%;
		background:#259b24;
		height:90rpx;
		line-height:90rpx;
		color:#fff;
		text-align:center;
		border-radius:0rpx;
		.wx_pay{
			font-size:34rpx;
		}
		.pay_price{
			font-size:40rpx;
		}
	}

	.btn_pay_cash{
		position:fixed;
		bottom:0rpx;
		width:100%;
		background:#ffc400;
		height:90rpx;
		line-height:90rpx;
		color:#fff;
		text-align:center;
		border-radius:0rpx;
		.wx_pay{
			font-size:34rpx;
		}
		.pay_price{
			font-size:40rpx;
		}
	}	

	.mask{
		width:100%;
		height:100%;
		position: fixed;
		top: 0;
		left: 0;
		background:#000;
		z-index:9000;
		opacity:0.7;
	}

	.switch_btn{
		width:94%;
		height:80rpx;
		line-height:80rpx;
		background:#fff;
		text{
			margin-left:15px;
		}
		switch{
			float:right;
			margin-right:10rpx;
		}
	}
.wx-switch-input{width:42px !important;height:20px !important;}
.wx-switch-input::before{width:42px !important;height: 20px !important;}
.wx-switch-input::after{width: 18px !important;height: 18px !important;}//中间小圆球
.get_time{
	width:94%;
	height:80rpx;
	line-height:80rpx;
	background:#fff;
	margin-top:30rpx;
	text{
		margin-left:20rpx;
	}
	i{
		margin-right:15rpx;
		float:right;
	}
	picker{
		float:right;
		height:50rpx;
		line-height:50rpx;	
		margin-top:-30rpx;	
		margin-right:10rpx;
	}

}
.get_phone{
	width:94%;
	height:60rpx;
	line-height:60rpx;
	background:#fff;
	padding-top:10rpx;
	padding-bottom:10rpx;
	text{
		float:left;
		margin-left:20rpx;
	}
	i{
		margin-right:15rpx;
		float:right;
	}
	view{
		float:right;
		margin-right:15rpx;
	}
}
.get_depos{
		width:94%;
	height:60rpx;
	line-height:60rpx;
	background:#fff;
	padding-top:10rpx;
	padding-bottom:10rpx;
}
</style>
<template>
	<view style="height:{{wheight-45}}px;">
		<scroll-view class="scroll_content" scroll-y style="padding:3%;height:{{wheight-45}}px">
		<!-- 当店自取 -->
			<view class="switch_btn" wx:if="{{type!=0&&type!=3}}">
				<text>到店自取</text><switch bindchange="onSwitchChange"/>
			</view>
		<!-- 预约时间 -->
			<view class="get_time" wx:if="{{isGetFood}}">
				<text>取餐时间</text>
				<i class="iconfont icon-pulldown"></i>
				<picker mode="time" value="{{time}}" start="09:01" end="23:01" bindchange="bindTimeChange">
    				<text class="picker">
      					{{getTime}}
    				</text>
  			</picker>
			</view>
			<view class="get_phone" wx:if="{{isGetFood}}" @tap="setAddress">
				<text>联系电话</text>
				<i class="iconfont icon-arrowright"></i>
				<view>{{getphone}}</view>
			</view>
		<!-- 我的地址 -->
			<view class="empty_address" wx:if="{{!isExit&&type==1&&!isGetFood}}" @tap="setAddress">
		        <text class="title">设置收货地址</text>
        		<image class="icon_arrow_right" src="../images/icon_arrow_right.png"></image>
      		</view>
      		<view class="address" wx:if="{{isExit&&type==1&&!isGetFood}}"  @tap="setAddress">
			<image class="icon_address" src="../images/icon_address.png"></image>
			<view class="address_detail">
				{{addressInfo.fProvinceId}}{{addressInfo.fCityId}}{{addressInfo.fAreaId}}{{addressInfo.fAddress}}
			</view>
			<view class="user_msg">
				<text class="name">{{addressInfo.fName}}</text>
				<text class="phone">{{addressInfo.fPhone}}</text>
			</view>
			<image class="icon_arrow_right" src="../images/icon_arrow_right.png"></image>
			</view>
		<!-- 商品列表 -->
		<view class="pro_list">
			<view class="pro_list_top">选购商品</view>
			<view class="pro_list_content">
				<view class="pro_list_item" wx:for="{{shopCart}}" wx:for-item="item" wx:key="index">
					<image class="image" mode="aspectFill" src="{{item.fGoodsImg}}"></image>
					<text class="name">{{item.fGoodsName}}</text>
					<text class="price">￥{{item.fBaseAmount}}</text>
					<text class="attr">{{item.fAttrName1}}{{item.fAttrName2}}{{item.fAttrName3}}{{item.fAttrName4}}</text>
					<!-- <text class="originPrice">￥{{item.originPrice}}</text> -->
					<text class="num">x {{item.fNum}}</text>
				</view>
			</view>
		</view>
		<!-- 其他费用 -->
		<view class="order_price" wx:if="{{type!=0&&type!=3}}">
			<text class="package_text" wx:if="{{type==1||type==2}}">包装费</text>
			<text class="package_price" wx:if="{{type==1||type==2}}">￥{{shopInfo.fPackPrice}}</text>
			<text class="distribution_text" wx:if="{{type==1}}">配送费</text>
			<text class="distribution_price" wx:if="{{type==1}}">￥{{shopInfo.fDistributionPrice}}</text>
		</view>
		<view class="coupons_price" @tap="onToCouponList" >
			<text class="coupon_text">优惠券</text>
			<i class="iconfont icon-arrowright" style="float:right"></i>
			<text class="coupon_price" wx:if="{{couponItem!=null}}">-￥{{couponItem.fAccountPrice}}</text>
		</view>
		<view class="discount_price">
			<text class="discount_text">会员折扣：{{discount*10}}折</text>
			<text class="discount">-￥{{discountPrice}}</text>
		</view>
		<!-- 余额抵扣 -->
		<view class="switch_btn" style="margin-top:20rpx;">
			<text>余额抵扣</text><switch bindchange="onDeposSwitchChange"/>
		</view>
		<view class="get_depos">
			<text style="margin-left:30rpx">当前余额：{{depos}}</text>
		</view>
		<view class="all_price">
			小计
			<text class="all_price_text">￥{{finalAllPrice}}</text>
		</view>
		<!-- 其他 -->
		<view class="order_content">
			<text class="remark_text">备注</text>
			<input class="remark_input" name="remark_input" bindinput="getRemarkInput"></input>
		</view>
		</scroll-view>
	</view>
	<!-- 微信支付 -->
	<form bindsubmit="onPay" report-submit="true">
	<button class="btn_pay" formType="submit" wx:if="{{payType==0}}">
		<text class="wx_pay">微信支付</text>
		<text class="pay_price">￥{{finalAllPrice}}</text>
	</button>
	</form>
	<!-- 现金支付 -->
	<form bindsubmit="onPay" report-submit="true">
	<button class="btn_pay_cash" formType="submit" wx:if="{{type==0&&payType==1}}">
		<text class="wx_pay">提交订单</text>
		<text class="pay_price">￥{{finalAllPrice}}</text>
	</button>
	</form>
	<!-- 余额支付 -->
	<form bindsubmit="onPay" report-submit="true">
	<button class="btn_pay_cash" formType="submit" wx:if="{{isReduceDepos}}">
		<text class="wx_pay">余额支付</text>
		<text class="pay_price">￥{{finalAllPrice}}</text>
	</button>
	</form>
</template>
<script>
import wepy from 'wepy';
import api from '@/api/api';
import{
	SYSTEM_INFO,
	TOKEN,
	ADDRESS_ID,
	SHOPID,
	CUSTID,
	SHOP_CART,
	OPENID,
	APPID,
	ORDER_COUPON,
	DISCOUNT,
	RECORD_BASE_MSG,
	MEMNUM
} from '@/utils/constant'
import tip from "../utils/tip"
import util from "../utils/util"
export default class CommitOrder extends wepy.page{
	config = {
		navigationBarTitleText:'提交订单',
	}
	components = {
	}

	data = {
		wheight:0,
		addressInfo:null,
		isExit:false,
		allPrice:0.00,//订单总价格
		allProNum:0,
		baseAmount:0.00,//商品总价格
		type:'',//1:外卖、0:堂食
		payType:'',//1：微信支付 、0：现金支付
		shopId:'',
		custId:'',
		token:'',
		remark:'',
		tableNo:'',
		shopInfo:{},
		shopCart:[],
		isGetFood:false,
		getTime:'',
		getphone:'',
		ip:'192.168.1.12',
		isPayFail:false,
		pre_pay_id:'',
		appId:'',
		openId:'',
		formId:'',
		couponItem:{},
		discount:0,
		discountPrice:0,
		finalAllPrice:0,
		preCouponPrice:null, // 选择优惠券减免金额
		depos:0,
		isReduceDepos:false
	}

	onLoad(option){
			console.log("onLoad");
			this.shopId = wepy.getStorageSync(SHOPID)||{};
			this.custId = wepy.getStorageSync(CUSTID)||{};
			this.token = wepy.getStorageSync(TOKEN)||{};
			this.appId = wepy.getStorageSync(APPID)||{};
			this.openId = wepy.getStorageSync(OPENID)||{};
			this.getShopMsg();//获取店铺信息
			this.onGetDepos()
			let systemInfo = wepy.getSystemInfoSync();
			this.wheight = systemInfo.windowHeight;
			this.type = option.type;
			console.log("type",this.type)
			this.payType = option.payType;
			this.tableNo = option.tableNo;
			if(this.tableNo==undefined||this.tableNo=='undefined'){
				this.tableNo = null;
			}
			this.discount = wepy.getStorageSync(DISCOUNT)||0
			this.shopCart = wepy.getStorageSync(SHOP_CART)||{};
			console.log("tableNo===",this.tableNo);
	}

	onShow(){
		//地址列表回调的时候调用onShow方法
		console.log("onShow");
		let addressId = wepy.getStorageSync(ADDRESS_ID)||'';
		console.log("addressId===",addressId);
		this.onGetAddress(addressId);
		this.couponItem = wepy.getStorageSync(ORDER_COUPON)||null
		console.log(this.couponItem)
		if(this.couponItem!=null && this.couponItem!=undefined){
			console.log("减少couponPrice")
			if(this.preCouponPrice == null){
				// 是第一次选择优惠券
				this.preCouponPrice = this.couponItem.fAccountPrice
			}else{
				// 不止一次选择优惠券，需要加上上一次的优惠券金额
				this.finalAllPrice = this.finalAllPrice + this.preCouponPrice
				this.preCouponPrice = this.couponItem.fAccountPrice // 为优惠券金额附上新值
			}
			this.finalAllPrice = this.finalAllPrice-this.couponItem.fAccountPrice
			this.finalAllPrice = parseFloat(this.finalAllPrice.toFixed(2))
		}
	}

	onHide(){
		console.log("onHide");
		wepy.setStorageSync(ADDRESS_ID,'');//当页面隐藏时初始化 addressId
	}

	onUnload(){
		console.log("onUnload");
		wepy.setStorageSync(ADDRESS_ID,'');//当页面隐藏时初始化 addressId	
	}

	getRemarkInput(e){
		this.remark = e.detail.value;
		console.log("订单备注:",this.remark);
	}

	//获取收货地址列表
		async onGetAddress(id){
			let that = this;
			const json =await api.getAddressAll({
				query:{
					fShopId:this.shopId,
					fCustId:this.custId,
					fId:id,
				}
			});
			console.log("onGetAddress",json);
			if(json.data.code == 0){
				console.log(json.data.data);
				if(id==''){
					//id为空，则查询列表，选择默认地址作为显示信息
					for(let i=0;i<json.data.data.length;i++){
						if(json.data.data[i].fIsDefault==1){
							this.addressInfo  = json.data.data[i];
							this.isExit = true;
							break;
						}
					}
				}else{
					//id有值，则查询该id的地址信息
					this.addressInfo = json.data.data[0];
					this.isExit = true;
				}
				// console.log("addressInfo.length==",this.addressInfo.length);
				if (this.addressInfo==null || this.addressInfo.length<=0) {
					this.isExit = false;
				}else{
					this.getphone = this.addressInfo.fPhone;
				}
			}else{
				tip.error(json.data.msg);
			}
			console.log("取餐电话:",this.getphone)
			console.log("is_exit_address",this.isExit);
			console.log("当前默认地址",this.addressInfo);
			that.showLoading = false;
			this.$apply();
		}

		async getShopMsg(){
			const json = await api.getShopInfo({
				query:{
					fShopId:this.shopId,
					fCustId:this.custId
				}
			});
			console.log("getShopMsg===",json);
			if(json.data.code == 0){
				this.shopInfo = json.data.data[0];
			}else{
				tip.error("网络连接失败!");
			}
			this.onGetAllBasePrice();//计算总价格
		}

		/**
		 * @desc 计算购物车的商品价格,所有优惠都是基于商品价格来进行优惠的，不包括配送费和包装费在内
		 */
		onGetAllBasePrice(){
			let allPrice = 0.00;
			let num = 0;
			for(let i = 0;i<this.shopCart.length;i++){
				num+=this.shopCart[i].fNum;//购物车中的所有商品数量相加
				allPrice+=this.shopCart[i].fAllAmount;//购物车中的所有商品金额相加
			}
			this.baseAmount = allPrice
			this.allPrice = allPrice
			if(this.discount!=0){
				this.discountPrice = parseFloat((this.allPrice-this.discount*this.allPrice).toFixed(2))
				this.allPrice = this.allPrice - this.discountPrice
			}else{
				this.discountPrice = 0
			}
			this.allPrice = parseFloat(this.allPrice.toFixed(2))	// 计算出折扣后的价格
			if(this.type==1){
				// 外卖 需要加上包装费和配送费
				this.finalAllPrice = (this.allPrice+this.shopInfo.fPackPrice+this.shopInfo.fDistributionPrice).toFixed(2);			
			}else if(this.type == 2){
				// 自取 需要加上包装费
				this.finalAllPrice = (this.allPrice+this.shopInfo.fPackPrice).toFixed(2);
			}else{
				this.finalAllPrice = this.allPrice.toFixed(2) //计算出加上包装费和配送费的价格
			}
			this.allProNum = num;
		}

		onSwitchChange(e){
			var datetime = util.getCurrentTime().split(" ");
			this.getTime = datetime[1];	
			this.isGetFood = e.detail.value
			if(e.detail.value){
				this.type = 2 //自取
				this.finalAllPrice = parseFloat((this.finalAllPrice-this.shopInfo.fDistributionPrice).toFixed(2))
			}else{
				this.type = 1 // 外卖
				this.finalAllPrice = parseFloat((this.finalAllPrice+this.shopInfo.fDistributionPrice).toFixed(2))
			}
			if(this.finalAllPrice <0 ){
				this.finalAllPrice = 0
			}
		}

		onDeposSwitchChange(e){
			this.isReduceDepos = e.detail.value
		}

		bindTimeChange(e){
			this.getTime = e.detail.value
		}

	async printOrderMsg(orderNo){
		const json = await api.printOrderMsg({
			query:{
				token:this.token,
				fShopId:this.shopId,
				fOrderNo:orderNo
			}
		})
		console.log("printOrderMsg===",json)
	}

	async onInsertIntegral(num){
		const json = await api.insertIntegral({
			query:{
				token:this.token,
				fShopId:this.shopId,
				fCustId:this.custId,
				fIntNum:num.toFixed(0)
			},
			method:'POST'
		})
		console.log('onInsertIntegral===',json)
	}

	async onReduceDepos(amount,orderNo,currentDate,custName,peopleNum,phone,time,status){
		const json = await api.reduceDepos({
			query:{
				fShopId:this.shopId,
				fCustId:this.custId,
				fAmount:amount,
				fOrderNo:orderNo,
			}
		})
		console.log('onReduceDepos===',json)
		if(json.data.code == 0 && json.data.data[0].result != -1){
			console.log('time和status======',time,status)
			this.onCommitOrder(orderNo,currentDate,custName,peopleNum,phone,time,status)
		}else{
			tip.toast('余额不足，请先充值或使用微信付款')
		}
	}

		// 微信支付接口
		onWxPay(params,orderNo,fId,allPrice){
			let that = this
			this.pre_pay_id = params.package.split('=')[1]
			wx.requestPayment({
				'appId':params.appId,
				'timeStamp':params.timeStamp,
				'nonceStr':params.nonceStr,
				'package':params.package,
				'signType':params.signType, // HMAC-SHA256和MD5
				'paySign':params.sign,
				'success':function(res){
					// 支付调用成功
					console.log(res)
				},
				'fail':function(res){
					// 支付调用失败
					console.log(res)
				},
				'complete':function(res){
					// 支付调用结束（成功或失败都会执行）
					console.log(res)
					if(res.errMsg == 'requestPayment:ok'){
						that.onSaveFormId()
						tip.toast('支付成功')
						// if(fId!=null&&fId!=''&&fId!=undefined){
						// 	that.onUserCoupon(fId)
						// }
						that.printOrderMsg(orderNo)
						//计算积分
						let memNum = wepy.getStorageSync(MEMNUM)||null
						if(memNum!=null && memNum!=undefined && memNum!=0){
							let num = allPrice*parseFloat(memNum) 
							console.log('计算之后的积分===',memNum,num)
							that.onInsertIntegral(parseFloat(num))
						}
						wepy.setStorageSync(SHOP_CART,[]); // 支付成功初始化购物车，清楚缓存
						wx.navigateBack({
      	  		delta: 1
      			})
					}else{
						tip.toast('支付失败')
					}
				}
			})
		}

		async onSaveFormId(){
			const json = await api.addFormId({
				query:{
					token:this.token,
					fOpenId:this.openId,
					fFormId:this.pre_pay_id
				},
				method:'POST'
			})
			console.log("onSaveFormId===",json)
		}

		async onUserCoupon(couponId){
			const json = await api.useCoupon({
				query:{
					token:this.token,
					fId:couponId
				},
				method:'POST'
			})
			console.log('onUserCoupon===',json)
		}

		async onGetDepos(){
			const json = await api.getDeposApi({
				query:{
					fShopId:this.shopId,
					fCustId:this.custId
				}
			})
			console.log('onGetDepos===',json)
			if(json.data.code == 0){
				this.depos = json.data.data[0].fAmount
			}
			this.$apply()
		}

		async onCommitOrder(orderNo,currentDate,custName,peopleNum,phone,time,status){
			console.log('time和status======',time,status)
			const json = await api.submitOrder({
				query:{
					token:this.token,
					fShopId:this.shopId,
					fCustId:this.custId,
					fOpenId:this.openId,
					fType:this.type,
					fStatus:status,
					fBasePrice:this.baseAmount,
					fDisCount:this.discount,
					fNote:this.remark,
					fDistributionPrice:this.shopInfo.fDistributionPrice,
					fPackPrice:this.shopInfo.fPackPrice,
					fDiscountPrice:this.discountPrice,
					fReductionPrice:0,
					fCouponId:this.couponItem!=null?this.couponItem.fCouponId:0,
					fAllAmount:this.finalAllPrice,
					fPayType:this.payType,
					fGoodsData:this.shopCart,
					fAddressId:this.addressInfo==null?null:this.addressInfo.fId,
					fCouponPrice:this.couponItem!=null?this.couponItem.fAccountPrice:0,
					fOrderNo:orderNo,
					fTable:this.tableNo=='null'?null:parseInt(this.tableNo),
					fDate:currentDate,
					fGetTime:this.getTime,
					fCustName:custName,
					fPeopleNum:peopleNum,
					fPhone:phone,
					fTime:time,

					fIP:this.ip,
					fTradeType:'JSAPI',
					fTotalFee:this.finalAllPrice*100
				},
				method:'POST'
			});
			console.log("提交订单===",json);
			if(json.data.code == 0){
				//现金支付 || 余额支付
				if(this.payType == 1 || this.payType == 2){
					tip.toast('提交订单成功')
					this.printOrderMsg(orderNo)
					wepy.setStorageSync(SHOP_CART,[]);					
					wx.navigateBack({
      	  	delta: 1
      		})					
				}else{
					//微信支付
					this.onWxPay(json.data.data,orderNo,this.couponItem!=null?this.couponItem.fId:null,this.finalAllPrice)
				}
				let fId = this.couponItem!=null?this.couponItem.fId:null
				if(fId!=null&&fId!=''&&fId!=undefined){
					this.onUserCoupon(fId)
				}
			}
		}
	
	methods = {
		onToCouponList(){
			wepy.navigateTo({
				url: "/packageA/pages/custcoupons?type=order&allamount="+this.allPrice
			})
		},
		setAddress(){
     	wepy.navigateTo({
     		url: "/pages/address?type=order"
   		});			
		},


		async onPay(e){
			if(this.isReduceDepos && this.depos < this.finalAllPrice){
				//余额足够抵扣
				tip.toast('余额不足，请先充值或使用微信付款')
				return
			}
			// this.formId = e.detail.formId
			// this.onSaveFormId()
			let token = wepy.getStorageSync(TOKEN)||{};
			let shopId = wepy.getStorageSync(SHOPID)||{};
			let custId = wepy.getStorageSync(CUSTID)||{};
			let openId = wepy.getStorageSync(OPENID)||{};
			let goodsData = [];

			let custName = null
			let peopleNum = null
			let phone = null
			let time = null

			
			if(this.isReduceDepos){
				this.payType = 2
			}
			let orderNo;
			if(this.type==0){
				orderNo = 'TC'+util.getTimeStamp();
				this.shopInfo.fDistributionPrice = 0
				this.shopInfo.fPackPrice = 0
			}else if(this.type==1){
				orderNo = 'WM'+util.getTimeStamp();
			}else if(this.type==2){
				orderNo = 'ZQ'+util.getTimeStamp();
				this.shopInfo.fDistributionPrice = 0
			}else if(this.type==3){
				orderNo = 'YY'+util.getTimeStamp();
				this.shopInfo.fDistributionPrice = 0
				this.shopInfo.fPackPrice = 0
				let item = wepy.getStorageSync(RECORD_BASE_MSG)
				console.log('预约item===',item)
				custName = item.name
				peopleNum = parseInt(item.num)
				phone = item.phone
				time = item.time				
			}
			for(let i = 0 ;i<this.shopCart.length;i++){
				this.shopCart[i].fEntryId = i+1;
				this.shopCart[i].fOrderNo = orderNo
			}
			let status = 0;//0:待支付；1:已支付,待确认；2:待配送；3：配送中；4：已完成；5：已取消；6：已确认，待上菜；7：已到店（预约订单）；8：已支付（预约订单）
			if(this.payType == 1){
				status = 0
			}
			if(this.type==3){
				status = 0
			}
			if(this.payType == 2){
				status = 1
			}

			if(this.remark==''){
				this.remark = null;
			}

			// console.log('payType===',this.payType)
			// return

			let currentDate = util.getCurrentTime();
			console.log("当前下单时间:",currentDate);
			if(this.getTime==''){
				this.getTime = null
			}
			console.log('time和status======',time,status)
			if(this.isReduceDepos){
				this.onReduceDepos(this.finalAllPrice,orderNo,currentDate,custName,peopleNum,phone,time,status)
			}else{
				this.onCommitOrder(orderNo,currentDate,custName,peopleNum,phone,time,status)
			}
			
		}
	}
}
</script>